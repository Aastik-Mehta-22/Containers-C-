* Vector (Resizable , fixed capacity , inplace contiguous array) (sequence)

vector is a dynamic array in C++. It automatically grows or shrinks as needed when you add or remove elements.


✅ Key Features of std::vector
1. Stores items in a row (contiguous memory)

2. Grows automatically when needed
When you add more items, the vector might allocate more memory to make room.

3. Capacity vs Size
size() → Number of elements actually stored.
capacity() → How many elements it can store before needing to allocate more memory.

Example:
std::vector<int> v;
v.reserve(100); // Reserve space for 100 elements
This helps reduce the number of memory reallocations, which are slow.

4.

| Operation                     | Time Complexity  |
| ----------------------------- | ---------------- |
| Random access (v\[i])         | O(1)             |
| Add/remove at the end         | O(1) (amortized) |
| Insert/remove in middle/front | O(n)             |


5. std::vector<bool> is a special case — it does not store bools as separate bytes, it store many bools in 1 byte as bits


 What is pmr::vector?
Since C++17, there's a version of vector in a namespace called pmr (Polymorphic Memory Resource). It's used when you want to control how memory is allocated (advanced use).

std::vector<int> v = {1, 2, 3};

Memory Layout (Contiguous):
+----+----+----+
|  1 |  2 |  3 |
+----+----+----+
  ↑    ↑    ↑
 v[0] v[1] v[2]

Capacity: 4 (example)
Size: 3


 Iterator Invalidation
What is Iterator Invalidation?

When you modify the vector (e.g., adding/removing elements), iterators (which point to elements) might become invalid. This means they can no longer be used to access vector elements.
| **Operation**                                       | **Invalidates Iterators?**                                               |
| --------------------------------------------------- | ------------------------------------------------------------------------ |
| **Read-only operations (e.g., accessing elements)** | No                                                                       |
| **swap, std::swap, clear, operator=, assign**       | Yes, always                                                              |
| **reserve, shrink\_to\_fit**                        | Only if capacity changes                                                 |
| **erase**                                           | Erased elements and after                                                |
| **push\_back, emplace\_back**                       | If the vector’s capacity changes, all iterators are invalidated          |
| **insert, emplace**                                 | If the vector’s capacity changes, all iterators are invalidated          |
| **resize**                                          | If capacity changes, iterators after the resize position are invalidated |
| **pop\_back**                                       | Only invalidates the last element iterator                               |


Member Types
| **Member Type**          | **Definition**                                                                   |
| ------------------------ | -------------------------------------------------------------------------------- |
| `value_type`             | Type of the elements in the vector (e.g., `int` in `std::vector<int>`)           |
| `allocator_type`         | Type of the allocator used (e.g., `std::allocator<T>`)                           |
| `size_type`              | Unsigned integer type for size and capacity (usually `std::size_t`)              |
| `difference_type`        | Signed integer type for differences between iterators (usually `std::ptrdiff_t`) |
| `reference`              | Type of reference to an element (e.g., `int&` in `std::vector<int>`)             |
| `const_reference`        | Const reference to an element (e.g., `const int&` in `std::vector<int>`)         |
| `pointer`                | Pointer to an element (can depend on allocator)                                  |
| `const_pointer`          | Const pointer to an element (can depend on allocator)                            |
| `iterator`               | Iterator type (e.g., `std::vector<int>::iterator`)                               |
| `const_iterator`         | Const iterator type (e.g., `std::vector<int>::const_iterator`)                   |
| `reverse_iterator`       | Reverse iterator type (for traversing in reverse)                                |
| `const_reverse_iterator` | Const reverse iterator                                                           |

Vector Operations (Key Methods)
Some useful operations provided by std::vector include:

Access Elements:

v[0]: Accesses the first element.

v.at(0): Accesses the first element with bounds checking.

v.front(): Accesses the first element.

v.back(): Accesses the last element.

Adding Elements:

v.push_back(10): Adds 10 to the end of the vector.

v.insert(v.begin() + 1, 20): Inserts 20 at position 1.

Removing Elements:

v.pop_back(): Removes the last element.

v.erase(v.begin()): Erases the first element.

Resizing:

v.resize(10): Changes the size of the vector (shrinks or grows).
